{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","props","onAddToDo","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","Component","App","todos","handleAddToDo","todo","concat","toConsumableArray","idx","window","confirm","filter","i","_this2","map","onClick","removeToDo","href","length","src","logo","alt","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc29fc8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            responsible: \"\",\r\n            description: \"\",\r\n            priority: \"low\"\r\n        };\r\n\r\n        // Para enlazar las funciones con el componente\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleInput(e) {\r\n\r\n        const { value, name } = e.target;\r\n\r\n        this.setState({ // Para cambiar los datos del state\r\n            [name]: value\r\n        });\r\n\r\n    }\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault(); // Para evitar que se refresque la pantalla\r\n        this.props.onAddToDo(this.state); // Llamamos al evento del componente principal\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"card\">\r\n                <form className=\"card-body\" onSubmit = {this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"title\" className=\"form-control\" placeholder=\"Title\" onChange = {this.handleInput}></input>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"responsible\" className=\"form-control\" placeholder=\"Responsible\" onChange = {this.handleInput}></input>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"description\" className=\"form-control\" placeholder=\"Description\" onChange = {this.handleInput}></input>\r\n                    </div>\r\n                    <select className=\"form-control\" onChange = {this.handleInput}>\r\n                        <option>Low</option>\r\n                        <option>Medium</option>\r\n                        <option>Hight</option>\r\n                    </select>\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-lg btn-block mt-4\">Save</button>\r\n                </form>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { todos } from './todos.json'\nimport TodoForm from './components/TodoForm';\n\nclass App extends Component {\n\n    constructor() {\n\n        super(); // OBLIGATORIO AL USAR EL CONSTRUCTOR (para heredar las funcionalidades de React)\n\n        this.state = { // Estado de los datos en una app de React\n            todos: todos\n        };\n\n        this.handleAddToDo = this.handleAddToDo.bind(this);\n\n    }\n\n    handleAddToDo(todo) {\n\n        this.setState({\n            todos: [...this.state.todos, todo]\n        });\n\n    }\n\n    removeToDo (idx) {\n\n        if ( window.confirm('Are you sure you want to delete it?') ) {\n            this.setState({\n                todos: this.state.todos.filter((e, i) => {\n                    return i !== idx;\n                })\n            });\n        }\n\n    }\n\n    render() {\n\n        const todos = this.state.todos.map((todo, i) => { // Para recorrer el objeto y obtener su Ã­ndice\n            return (\n                <div className=\"col-md-4 mt-4\">\n                    <div className=\"card text-center\">\n                        <div className=\"card-header\">\n                            <h3>{todo.title}</h3>\n                            <span className=\"badge badge-pill badge-danger\">{todo.priority}</span>\n                        </div>\n                        <div className=\"card-body\">\n                            <p>{todo.description}</p>\n                            <p><mark>{todo.responsible}</mark></p>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-danger btn-lg btn-block mt-4\" onClick = {this.removeToDo.bind(this, i)}>Remove</button>\n                        </div>\n                    </div>\n                </div>\n            )\n        }) \n\n        return (\n            <div className=\"App\">\n\n                <nav className=\"navbar navbar-dark bg-dark\">\n                    <span href=\"\" className=\"text-white\">\n                        Tasks<span className=\"badge badge-pill badge-light ml-2\">{this.state.todos.length}</span>\n                    </span>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </nav>\n                \n                <div className=\"container mt-4 mb-4\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4 mt-4\">\n                            <TodoForm onAddToDo = {this.handleAddToDo}/>\n                        </div>\n                        { todos }\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}